// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int     @id @unique @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @unique @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            Int       @id @unique @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                     Int            @id @unique @default(autoincrement())
  name                   String?
  event_start_date       DateTime?
  event_end_date         DateTime?
  predictions_close_date DateTime?
  sections               EventSection[]
}

model EventSection {
  id          Int        @id @unique @default(autoincrement())
  eventId     Int
  event       Event      @relation(fields: [eventId], references: [id])
  heading     String?
  description String?
  questions   Question[]
  order       Int

  @@index([eventId])
}

model Question {
  id             Int           @id @unique @default(autoincrement())
  type           QuestionType?
  question       String?
  optionSet      OptionSet?    @relation(fields: [optionSetId], references: [id])
  optionSetId    Int?
  EventSection   EventSection  @relation(fields: [eventSectionId], references: [id])
  eventSectionId Int
  order          Int
  points         Float         @default(0)
  resultString   String?
  resultBoolean  Boolean?
  resultNumber   Float?
  resultOption   Option?       @relation(fields: [optionId], references: [id])
  optionId       Int?

  @@index([eventSectionId])
  @@index([optionSetId])
  @@index([optionId])
}

model Option {
  id          Int        @id @unique @default(autoincrement())
  title       String
  optionSet   OptionSet  @relation(fields: [optionSetId], references: [id])
  optionSetId Int
  Question    Question[]

  @@index([optionSetId])
}

model OptionSet {
  id       Int        @id @unique @default(autoincrement())
  title    String?
  options  Option[]
  Question Question[]
}

enum Role {
  ADMIN
  USER
}

enum QuestionType {
  MULTI
  TIME
  NUMBER
  TEXT
  BOOLEAN
}
