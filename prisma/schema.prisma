// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int     @id @unique @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @unique @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int          @id @unique @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("USER")
  accounts      Account[]
  sessions      Session[]
  entries       EventEntry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                   Int            @id @unique @default(autoincrement())
  name                 String?
  description          String?
  eventStartDate       DateTime?      @map("event_start_date")
  eventEndDate         DateTime?      @map("event_end_date")
  predictionsCloseDate DateTime?      @map("predictions_close_date")
  sections             EventSection[]
  inviteId             String         @unique
  entries              EventEntry[]
  visible              Boolean        @default(false)
  information          String?        @db.LongText
}

model EventSection {
  id                Int                 @id @unique @default(autoincrement())
  eventId           Int
  event             Event               @relation(fields: [eventId], references: [id])
  heading           String?
  description       String?
  questions         Question[]
  order             Int
  EventEntrySection EventEntrySection[]

  @@index([eventId])
}

model Question {
  id                 Int                  @id @unique @default(autoincrement())
  type               QuestionType?
  question           String?
  optionSet          OptionSet?           @relation(fields: [optionSetId], references: [id])
  optionSetId        Int?
  eventSection       EventSection         @relation(fields: [eventSectionId], references: [id])
  eventSectionId     Int
  order              Int
  points             Float                @default(1)
  resultString       String?
  resultBoolean      Boolean?
  resultNumber       Float?
  resultOption       Option?              @relation(fields: [optionId], references: [id])
  optionId           Int?
  EventEntryQuestion EventEntryQuestion[]

  @@index([eventSectionId])
  @@index([optionSetId])
  @@index([optionId])
}

model Option {
  id                 Int                  @id @unique @default(autoincrement())
  title              String
  optionSet          OptionSet            @relation(fields: [optionSetId], references: [id])
  optionSetId        Int
  question           Question[]
  order              Int
  eventEntryQuestion EventEntryQuestion[]

  @@index([optionSetId])
}

model OptionSet {
  id       Int        @id @unique @default(autoincrement())
  title    String?
  options  Option[]
  question Question[]
}

enum QuestionType {
  MULTI
  TIME
  NUMBER
  TEXT
  BOOLEAN
}

model EventEntry {
  id            Int                 @id @unique @default(autoincrement())
  eventId       Int
  userId        Int
  event         Event               @relation(fields: [eventId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
  entrySections EventEntrySection[]
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @default(now()) @map("update_at")
  totalScore    Float               @default(0) @map("total_score")
  rank          Int                 @default(0)

  @@index([userId])
  @@index([eventId])
}

model EventEntrySection {
  id             Int                  @id @unique @default(autoincrement())
  sectionId      Int
  section        EventSection         @relation(fields: [sectionId], references: [id])
  entryQuestions EventEntryQuestion[]
  eventEntry     EventEntry           @relation(fields: [eventEntryId], references: [id])
  eventEntryId   Int
  sectionScore   Float                @default(0) @map("section_score")

  @@index([sectionId])
  @@index([eventEntryId])
}

model EventEntryQuestion {
  id                  Int               @id @unique @default(autoincrement())
  eventEntrySectionId Int
  entrySection        EventEntrySection @relation(fields: [eventEntrySectionId], references: [id])
  entryString         String?
  entryBoolean        Boolean?
  entryNumber         Float?
  entryOption         Option?           @relation(fields: [entryOptionId], references: [id])
  entryOptionId       Int?
  question            Question          @relation(fields: [questionId], references: [id])
  questionId          Int
  questionScore       Float             @default(0) @map("question_score")

  @@index([eventEntrySectionId])
  @@index([entryOptionId])
  @@index([questionId])
}
